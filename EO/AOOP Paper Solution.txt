AOOP Paper Solution : 
11-06-2024

Question : 1
1(a) Simple, Object Oriented, platform Independent,robust,secure,distributed

1(b) Bytecode : Bytecode is  the platform independent code in java that is generated by  Java Compiler while we are compiling a program
	JVM :	JVM stands for java virtual machine
		it implements java's 'wora' (write once run anywhere) feature
		it is useful for generate machine code from bytecode 
		jvm runs precompiled programs
		in jvm jdk and jre situated
		it creates an environment to develop java program				

1(c)  import java.util.*;
public class maxofthree {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a;
        int b;
        int c;
        System.out.println("enter a  : ");
         a = sc.nextInt();
         System.out.println("enter b  : ");
         b = sc.nextInt();
         System.out.println("enter c  : ");
         c = sc.nextInt();
         if(a>b && a>c){
            System.out.println("a is greater than b and c :  " + a);            
         }
         if(b>c ){
            System.out.println("b is greater than c :  " + b);          
         }
         else{
            System.out.println("c is greater than a and b :  "+c);
         }
         int res = (a>b && a>c)?a:((b>c?b:c));
         System.out.println("Max from given values is : "+res);
         sc.close();
    }
}

Question : 2
2(a) inheritence, polymorphism, abstraction,interface, encapsulation,class,objects

2(b) method overloading : method overloading feature in java allows us to declare 	same name method but with different signatures
		signature can be either type of variable,or no. of variables, or can be order of variables
		it is used when we require to declare same name methods for diffrent applications
		it is better for end user readability
		ex., class demo {
			void sum(int a,int b){
				System.out.println(a+b);
			}
			void sum(int a, int b, int c){
				System.out.println(a+b+c);
			}

		}
		public class overloading {
			public static void main(String[] s){

				demo d1 = new demo();
				int a=10,b=20,c=30;
				d1.sum(a,b);
				d1.sum(a, b, c);        
			}
		}

2(c) class Student{
    int eno;
    String name;
    void display(String name){
        System.out.println("Student name is : "+name);
    }
}
public class demo {
    public static void main(String s[])    {
        
        Student s1 = new Student();
        Student s2 = new Student();
        Student s3 = new Student();
        Student s4 = new Student();
        Student s5 = new Student();
        
        s1.display("jay");
        s2.display("ajay");
        s3.display("vijay");
        s4.display("bijay");
        s5.display("cijay");

    }
}
    
Qustion 3:
3(a) types of inheritance :
singl, multilevel, multiple, hierarchical, hybrid

3(b) while loop 
-->while loop can iterate atleast once or not 
Syntax :  while(condition){
				//body of the loop
		  }
Example : while(i<10){
			System.out.println(i);
		 }

do-while loo
-->do-while loop can iterate atleas once
Syntax :do{
			//body of the loop
		     }while(condition)
			
Example : do{
			System.out.println(i);
		     }while(i<10);		

3(c) constructor overloading 
	class greet{
		greet(){
		   System.out.println("hello");
		}
		greet(String uname){
		   System.out.println("hello "+uname);
		}
	}
	public class Main{
	    public static void main(String s[]){
		    greet g1 = new greet();
		    greet g2 = new greet("Alice");
		}
	}

Question:4
4(a): String Methods : charAt, contains, length
1.charAt(): char at method in java is used to identify character from string using index
   Syntax : string.charAt(index);
   Example : s = "hello";
  		 System.out.println(s.charAt(3));
--> it returns characer present in that index which is l(second)

2.contains() : contains method in java is used to check wheather string contains string that               is provided in parameter or not 
    Syntax : string.contains(str)
    Example: s= "Hello World"
			s.contains("World");
--> it returns boolean vakue in true or false in this case it returns true'

3.length() : length function in java is used to identify length of string 
   Syntax : string.length();
    Example : s="Hello";
			s.length();
--> it returns length of string which is 5

4(b) : inside myPackage folder:
		myPackage.java
		package myPackage;
			public class myClass{
				public void greet(){ System.out.println("Hello from package file");
			}
		}
	   outside myPackage folder:
		packageUse.java
		import myPackage.myClass;
		class packageUse{
			public static void main(String s[]){
				myClass obj = new myClass();
				obj.greet();
			}
		}


















	
